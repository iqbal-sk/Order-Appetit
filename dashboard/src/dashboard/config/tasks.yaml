# Tasks Definitions
schema_analysis_task:
  description: >
    Analyze the MongoDB collections of the 'Order Appetit' application to identify the necessary collections and fields required to address the following user query:

    "{user_query}"

    **Context:**
    - 'Order Appetit' is a local food delivery app in Buffalo.
    - The associated database is named '{database_name}'.
    - Available collections are:
      {collection_names}
    - **MongoDB URI**: {mongodb_uri}

    **Instructions:**
    1. **Identify Relevant Collections and Fields**:
       - From the provided list, determine which collections and fields are necessary to answer the user query.
       - Focus on collections related to Restaurants, Orders, and Users as per the metrics provided.
       - Justify your selection based on their relevance to the query components.

    2. **Connect to MongoDB**:
       - Use the provided MongoDB URI and database name to establish a connection.

    3. **Perform Schema Analysis**:
       - Analyze the schemas of the relevant collections to understand the structure and data types.
       - Pay special attention to fields that store product names, ensuring you note any inconsistencies or variations in naming.
       - Identify patterns or common variations in product names that may affect data retrieval.

    4. **Map Query Components**:
       - Break down the user query into key components (e.g., time frame, product name).
       - Map each component to the corresponding collections and fields, emphasizing names over IDs.
       - Document any naming inconsistencies found and how they relate to the query components.

    5. **Handle Naming Inconsistencies**:
       - Develop strategies to handle variations in product names (e.g., 'Mac and Cheese', 'Mac & Cheese', 'Mac n cheese').
       - Suggest methods such as creating a standardized mapping, using regex patterns, or implementing fuzzy matching techniques.
       - Ensure that all variations of product names are accounted for in the analysis.

    6. **Document Findings**:
       - Provide a detailed mapping of query components to collections and fields, including strategies for handling naming inconsistencies.
       - Include any assumptions or considerations made during the analysis.

    **Objective:**
    - Identify the necessary collections and fields to address the user query, focusing on the specified metrics.
    - Account for naming inconsistencies to ensure all relevant records are included in the analysis.
    - Prepare a schema mapping that will be used to construct consistent and comprehensive queries.

  expected_output: >
    - A list of relevant collections and fields necessary to answer the user query, with justifications.
    - A detailed mapping of query components to collections and fields, including strategies for handling naming inconsistencies.
    - Explanations and any assumptions made during the analysis.

  agent: schema_analyzer
  context:
    - none  # Since this is a root task

query_building_task:
  description: >
    Based on the schema mapping from the `schema_analysis_task`, generate an optimized MongoDB aggregation pipeline or query that consistently provides both sales count/volume and sales value in dollars, and uses names instead of IDs, for the following user query:

    "{user_query}"

    **Context:**
    - **Schema Mapping**: Use the output from the `schema_analysis_task`, including strategies for handling naming inconsistencies.
    - **MongoDB URI**: {mongodb_uri}
    - **Database Name**: {database_name}
    - **Collections**: {collection_names}

    **Instructions:**
    1. **Review Schema Mapping**:
       - Examine the mapping to understand the necessary collections and fields, focusing on names and monetary values.
       - Pay special attention to the strategies for handling naming inconsistencies.

    2. **Construct the Query**:
       - Use the mapping to build a MongoDB query or aggregation pipeline that retrieves the required data.
       - Implement the strategies for handling naming inconsistencies (e.g., using regex patterns).
       - Ensure the query returns both sales count/volume and sales value in dollars.
       - Include names (e.g., product names, restaurant names) in the results instead of IDs.

    3. **Optimize the Query**:
       - Apply best practices for query optimization.
       - Ensure the query performs efficiently on large datasets, even when using regex or text search.

    4. **Handle Data Consistency**:
       - Implement techniques to handle data variations and ensure consistent output formats.
       - If you are using regular expression, utilize this format -> r"<expression>", for regular expression to write code.

    5. **Provide Executable Code**:
       - Write clean, executable Python code using PyMongo to connect to the database and execute the query.
       - Please use print statements to print results as a JSON object.
       - Include comments and follow best coding practices.

    6. **Document the Query Logic**:
       - Explain how the query addresses the user query, focusing on handling naming inconsistencies.
       - Include any assumptions or considerations made.

    **Objective:**
    - Produce an optimized MongoDB query that accounts for naming inconsistencies, ensuring all relevant records are included.
    - Provide code that returns results as a JSON object for consistent and comprehensive analysis.

  expected_output: >
    You MUST Return a JSON object containing the following fields 
    - python_code: Executable code that connects to MongoDB and runs the optimized query, returning results as a JSON object.
    - query_output_structure: Description of the expected output format, including fields and data types.
    - query_explanation: Detailed explanations of the query logic, ensuring consistency and use of names.

  agent: query_builder
  context:
    - schema_analysis_task

data_analysis_task:
  description: >
    Execute the MongoDB query generated in the `query_building_task` and analyze the results to generate meaningful business insights, ensuring consistency and use of names instead of IDs, for the following user query:

    "{user_query}"

    **Context:**
    - **User Query**: "{user_query}"
    - **MongoDB URI**: "{mongodb_uri}"
    - **Database Name**: "{database_name}"
    - **Query Code**: Use the Python code from the `query_building_task`.
    - **Schema Mapping**: Refer to outputs from the `schema_analysis_task`.

    **Instructions:**
    1. **Execute the Query**:
       - Properly format this Python code for query.
       - Properly pass the arguments to Code Execution Tool available.
       - Run the provided Python code to retrieve the data.
       - Ensure the data includes all variations of product names as per the handling strategy.
       - Capture the JSON output from the query.

    2. **Parse JSON Results**:
       - Load the JSON data into a Python dictionary or appropriate data structure.
       - Verify the integrity and completeness of the data.

    3. **Review Query Results**:
       - Examine the data for completeness and consistency.
       - Confirm that all relevant product name variations are included and consolidated if necessary.

    4. **Consolidate Product Names**:
       - If necessary, consolidate variations of product names under a standardized name for analysis.
       - Sum quantities and sales values accordingly.

    5. **Data Analysis**:
       - Analyze the data to identify trends, patterns, and insights related to the specified metrics for Restaurants, Orders, and Users.
       - Calculate relevant statistics or KPIs (e.g., total sales, average order value).

    6. **Generate Insights**:
       - Provide meaningful business insights based on the analysis.
       - Ensure that insights are consistent and align with business objectives.

    7. **Provide Recommendations**:
       - Offer actionable suggestions based on the findings.
       - Focus on areas like improving slow times, addressing underperforming restaurants, and enhancing user engagement.

    8. **Document Your Analysis**:
       - Explain your analysis process, including how naming inconsistencies were handled.
       - Note any assumptions or limitations encountered.

    **Objective:**
    - Analyze the query results to extract valuable insights, ensuring that all relevant records are included despite naming inconsistencies.
    - Present findings clearly, including both volume and sales value, and provide actionable recommendations.
    - After execution of query, utilize the output to do further analysis
    - Feel free to plot the results, utilize the code executor to generate plots and save them on harddisk.
    

  expected_output: >
    - **Analysis Results**: Key metrics and figures, including both volume and sales value, with consolidated product names.
    - **Insights**: Detailed explanations of what the data indicates.
    - **Recommendations**: Actionable suggestions for business improvements.

  agent: data_analyst
  context:
    - query_building_task
    - schema_analysis_task